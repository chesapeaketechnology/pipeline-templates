include:
  - remote: https://raw.githubusercontent.com/chesapeaketechnology/gitlab-templates/release/3.x.x/lib/gitlab/ci/templates/references/gradle/GradleWrapperSetup.yml
  - remote: https://raw.githubusercontent.com/chesapeaketechnology/gitlab-templates/refs/heads/feature/android_tests_code_coverage/lib/gitlab/ci/templates/jobs/gradle/AndroidInstrumentationTests.yml
  - template: Jobs/Secret-Detection.gitlab-ci.yml
  - template: Jobs/SAST.gitlab-ci.yml

cache:
  key: ${CI_PROJECT_ID}
  paths:
    - .gradle/

variables:
  IMAGE_PREFIX: ""
  DEFAULT_IMAGE: "jangrewe/gitlab-ci-android"
  DEPLOY_DEBUG_APK_SLACK_MESSAGE: "Hello Team! Here is the latest debug APK/AAR from branch `${CI_COMMIT_REF_NAME}`. It was triggered by: `${CI_PIPELINE_SOURCE}`."
  DEPLOY_DEBUG_APK_PATH: app/build/outputs/apk
  DEPLOY_DEBUG_AAR_PATH: app/build/outputs/aar
  DEPLOY_DEBUG_APK_NAMES: yourdebugapkname
  DEPLOY_RELEASE_APK_SLACK_MESSAGE: "Hello Team! Here is the latest release APK/AAR triggered by tag: `${CI_COMMIT_TAG}`"
  DEPLOY_RELEASE_APK_PATH: app/build/outputs/apk
  DEPLOY_RELEASE_AAR_PATH: app/build/outputs/aar
  DEPLOY_RELEASE_APK_NAMES: yourreleaseapkname
  APK_SLACK_CHANNEL_ACCESS_TOKEN: ""
  APK_SLACK_CHANNEL_ID: ""
  ARTIFACT_SNAPSHOT_URL: ""
  ARTIFACT_RELEASE_URL: ""
  ARTIFACT_REPO_PASSWORD: ""
  ARTIFACT_REPO_USERNAME: ""
  LINT_CHECK_DISABLED: "false"
  PROJECT_DIR: ./
  JACOCO_OUTPUT_DIR: $PROJECT_DIR/build/reports/jacoco
  JACOCO_HTML_LOCATION: $JACOCO_OUTPUT_DIR/index.html
  JACOCO_XML_LOCATION: $JACOCO_OUTPUT_DIR/jacoco-report.xml
  COMBINE_TEST_COVERAGE_DISABLED: "true"
  RELEASE:
    value: ""
    description: Determines what type of apk should be produced. Leave blank to produce a debug apk or anything, like 'true', to create a release apk.

.debug_rules: &debug_rules
  - if: $CI_COMMIT_TAG
    when: never # Never build debug builds for tags
  - if: $RELEASE
    when: never
  - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  - if: ($CI_PIPELINE_SOURCE == "web") && '$RELEASE != "true"'

.snapshot_rules: &snapshot_rules
  - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    when: never
  - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

.release_rules: &release_rules
  - if: $CI_COMMIT_TAG
  # Only when manually invoked from the web UI and RELEASE has a non-empty value
  - if: ($CI_PIPELINE_SOURCE == "web" || $CI_PIPELINE_SOURCE == "pipeline") && $RELEASE

default:
  image: ${IMAGE_PREFIX}$DEFAULT_IMAGE
  interruptible: true

before_script:
  - !reference [ .configure_gradle_wrapper, script ]

stages:
  - test
  - report_processing
  - assemble
  - deploy

.testBase:
  stage: test
  script:
    # --build-cache improves speed, see https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Gradle.gitlab-ci.yml
    - ./gradlew -Pci --console=plain --build-cache $BUILD_TARGET
  artifacts:
    when: always
    expire_in: 1 days
    paths:
      # Speed up Gitlab jobs after this one by saving build artifacts
      - "**/build/**"
    reports:
      junit:
        - "**/TEST-*.xml"

lintDebug:
  rules:
    - if: '$LINT_CHECK_DISABLED =~ /true/i'
      when: never
    - if: $CI_COMMIT_TAG
      when: never # Never build debug builds for tags
    - if: $RELEASE
      when: never
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_PIPELINE_SOURCE == "web"
  extends: .testBase
  variables:
    BUILD_TARGET: lintDebug
  after_script:
    - echo "copying lint results to gitlab pages so html can be viewed easily in a Gitlab artifact"
    - public_dir_tmp=$CI_PROJECT_DIR/../public
    - public_dir_final=$CI_PROJECT_DIR/public
    - mkdir -p $public_dir_final
    - mv $public_dir_final $public_dir_tmp
    - destination=$(cd -- "$public_dir_tmp" && pwd) # make it an absolute path
    - echo $destination
    - |+
      cd -- "$CI_PROJECT_DIR" &&
      find . -name "lint-results-debug.html" -exec sh -c '
      mkdir -p "$0/${1%/*}"
      cp "$1" "$0/$1"
      ' "$destination" {} \;
    - mv $public_dir_tmp $public_dir_final
  artifacts:
    expire_in: 1 days
    paths:
      - "**/lint-results-*.html"
      - public
    when: always
  allow_failure: true

testDebug:
  rules: *debug_rules
  extends: .testBase
  variables:
    BUILD_TARGET: testDebug

testRelease:
  rules: *release_rules
  extends: .testBase
  variables:
    BUILD_TARGET: testRelease

instrumentationTests:
  rules: *debug_rules

# Override default rules and artifacts at
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Jobs/Secret-Detection.gitlab-ci.yml
secret_detection:
  rules:
    - if: $SECRET_DETECTION_DISABLED == 'true' || $SECRET_DETECTION_DISABLED == '1'
      when: never
    - if: $CI_COMMIT_BRANCH
    - if: $CI_MERGE_REQUEST_IID
  artifacts:
    reports:
      secret_detection: gl-secret-detection-report.json
    paths:
      - gl-secret-detection-report.json

# Override default rules and artifacts at
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Jobs/SAST.gitlab-ci.yml.
semgrep-sast:
  # Makes some assumptions like "exists" for language files types like ".py" not needed because we are explicitly deciding to turn on semgrep-sast for a given language Gitlab pipeline.
  # Also Gitlab Advanced SAST checks not done since that is a Gitlab Ultimate feature we're going to ignore since not many/any users using Gitlab Ultimate.
  rules:
    - if: $SAST_DISABLED == 'true' || $SAST_DISABLED == '1'
      when: never
    - if: $SAST_EXCLUDED_ANALYZERS =~ /semgrep/
      when: never
    - if: $CI_COMMIT_BRANCH
    - if: $CI_MERGE_REQUEST_IID
  artifacts:
    reports:
      sast: gl-sast-report.json
    paths:
      - gl-sast-report.json

assembleDebug:
  stage: assemble
  rules: *debug_rules
  script:
    - ./gradlew assembleDebug
  artifacts:
    expire_in: 1 week
    paths:
      - $DEPLOY_DEBUG_APK_PATH
      - $DEPLOY_DEBUG_AAR_PATH

assembleRelease:
  stage: assemble
  rules: *release_rules
  script:
    - echo ${KEYSTORE_FILE} | base64 -d > my.keystore
    - ./gradlew assembleRelease
      -Pandroid.injected.signing.store.file=$(pwd)/my.keystore
      -Pandroid.injected.signing.store.password=$KEYSTORE_PASSWORD
      -Pandroid.injected.signing.key.alias=$KEY_ALIAS
      -Pandroid.injected.signing.key.password=$KEY_PASSWORD
  artifacts:
    paths:
      - $DEPLOY_RELEASE_APK_PATH
      - $DEPLOY_RELEASE_AAR_PATH

deployArtifactSnapshot:
  stage: deploy
  rules: *snapshot_rules
  script:
    - |
      if ./gradlew tasks | grep publish -q; then
        ./gradlew publish -PartifactUsername=$ARTIFACT_REPO_USERNAME -PartifactPassword=$ARTIFACT_REPO_PASSWORD -PartifactURL="${ARTIFACT_SNAPSHOT_URL}"
      else
        echo "No publish command found"
      fi

deployArtifactRelease:
  stage: deploy
  rules: *release_rules
  script:
    - |
      if ./gradlew tasks | grep publish -q; then
        ./gradlew publish -PartifactUsername=$ARTIFACT_REPO_USERNAME -PartifactPassword=$ARTIFACT_REPO_PASSWORD -PartifactURL="${ARTIFACT_RELEASE_URL}"
      else
        echo "No publish command found"
      fi

deployApkDebug:
  stage: deploy
  rules: *debug_rules
  allow_failure: true
  script:
    - if [ -z "${APK_SLACK_CHANNEL_ACCESS_TOKEN}" ]; then echo "APK_SLACK_CHANNEL_ACCESS_TOKEN is unset so not pushing message to Slack"; else echo "APK_SLACK_CHANNEL_ACCESS_TOKEN is set to '$APK_SLACK_CHANNEL_ACCESS_TOKEN'"; fi
    - if [ -z "${APK_SLACK_CHANNEL_ID}" ]; then echo "APK_SLACK_CHANNEL_ID is unset so not pushing message to Slack"; else echo "APK_SLACK_CHANNEL_ACCESS_TOKEN is set to '$APK_SLACK_CHANNEL_ID'"; fi
    - if [ -z "${DEPLOY_DEBUG_APK_SLACK_MESSAGE}" ]; then echo "$DEPLOY_DEBUG_APK_SLACK_MESSAGE is unset so will use empty message for Slack"; else echo "$DEPLOY_DEBUG_APK_SLACK_MESSAGE is set to '$DEPLOY_DEBUG_APK_SLACK_MESSAGE'"; fi
    - |
      for DEPLOY_DEBUG_APK_NAME in $DEPLOY_DEBUG_APK_NAMES
        do
          debug_apk_file=$(find $DEPLOY_DEBUG_APK_PATH -name *$DEPLOY_DEBUG_APK_NAME*)
          echo "found debug apk file $debug_apk_file"
          curl \
            -F token="${APK_SLACK_CHANNEL_ACCESS_TOKEN}" \
            -F channels="${APK_SLACK_CHANNEL_ID}" \
            -F initial_comment="$DEPLOY_DEBUG_APK_SLACK_MESSAGE" \
            -F "file=@$debug_apk_file" \
            https://slack.com/api/files.upload
        done
  cache: {}

deployApkRelease:
  stage: deploy
  rules: *release_rules
  script:
    - if [ -z "${APK_SLACK_CHANNEL_ACCESS_TOKEN}" ]; then echo "APK_SLACK_CHANNEL_ACCESS_TOKEN is unset so not pushing message to Slack"; else echo "APK_SLACK_CHANNEL_ACCESS_TOKEN is set to '$APK_SLACK_CHANNEL_ACCESS_TOKEN'"; fi
    - if [ -z "${APK_SLACK_CHANNEL_ID}" ]; then echo "APK_SLACK_CHANNEL_ID is unset so not pushing message to Slack"; else echo "APK_SLACK_CHANNEL_ACCESS_TOKEN is set to '$APK_SLACK_CHANNEL_ID'"; fi
    - if [ -z "${DEPLOY_RELEASE_APK_SLACK_MESSAGE}" ]; then echo "$DEPLOY_RELEASE_APK_SLACK_MESSAGE is unset so will use empty message for Slack"; else echo "$DEPLOY_RELEASE_APK_SLACK_MESSAGE is set to '$DEPLOY_RELEASE_APK_SLACK_MESSAGE'"; fi
    - |
      for DEPLOY_RELEASE_APK_NAME in $DEPLOY_RELEASE_APK_NAMES
        do
          release_apk_file=$(find $DEPLOY_RELEASE_APK_PATH -name *$DEPLOY_RELEASE_APK_NAME*)
          echo "found release apk file $release_apk_file"
          curl \
            -F token="${APK_SLACK_CHANNEL_ACCESS_TOKEN}" \
            -F channels="${APK_SLACK_CHANNEL_ID}" \
            -F initial_comment="$DEPLOY_RELEASE_APK_SLACK_MESSAGE" \
            -F "file=@$release_apk_file" \
            https://slack.com/api/files.upload
        done
  cache: {}

workflow:
  rules: # Trigger pipeline:
    - if: $CI_MERGE_REQUEST_IID # if this is part of an MR
    - if: $CI_COMMIT_TAG # if this is a release
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH # if this is a push to develop
    - if: $CI_PIPELINE_SOURCE == "web" # if triggered from the Gitlab UI

combineCoverageReports:
  stage: report_processing
  needs: [testDebug, instrumentationTests]
  script:
    - echo "Combining test reports using JaCoCo"
    - ./gradlew $BUILD_TARGET
    - cat $JACOCO_HTML_LOCATION | grep -o 'Total[^%]*%'
  artifacts:
    when: always
    paths:
      - $JACOCO_HTML_LOCATION
      - $JACOCO_XML_LOCATION
    expire_in: 1 days
  rules:
    - if: '$COMBINE_TEST_COVERAGE_DISABLED =~ /true/i'
      when: never
    - if: '$VISUALIZE_TEST_COVERAGE_DISABLED =~ /true/i'
      when: never
    # Don't rebuild when tags are committed
    - if: $CI_COMMIT_TAG
      when: never
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_PIPELINE_SOURCE == "web"
  allow_failure: true

visualizeCombinedTestCoverage:
  stage: report_processing
  needs: [ "combineCoverageReports" ]
  image: registry.gitlab.com/haynes/jacoco2cobertura:1.0.7
  script:
    - echo $JACOCO_HTML_LOCATION
    - echo $JACOCO_XML_LOCATION
    - test -e $JACOCO_XML_LOCATION || { echo "JaCoCo XML report not found!"; exit 1; }
    - test -e $JACOCO_HTML_LOCATION || { echo "JaCoCo HTML report not found!"; exit 1; }
    - mkdir -p build/reports/jacoco
    - python /opt/cover2cover.py $JACOCO_XML_LOCATION $PROJECT_DIR/src/main/java > $PROJECT_DIR/build/reports/jacoco/cobertura.xml
    - python /opt/source2filename.py $PROJECT_DIR/build/reports/jacoco/cobertura.xml
    - cat $JACOCO_HTML_LOCATION | grep -o 'Total[^%]*%'
  coverage: '/Total.*?([0-9]{1,3})%/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: "**/cobertura.xml"
  rules:
    - if: '$COMBINE_TEST_COVERAGE_DISABLED =~ /true/i'
      when: never
    - if: '$VISUALIZE_TEST_COVERAGE_DISABLED =~ /true/i'
      when: never
    # Don't rebuild when tags are committed
    - if: $CI_COMMIT_TAG
      when: never
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_PIPELINE_SOURCE == "web"
  allow_failure: true